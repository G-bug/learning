<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"
       default-autowire="byName">

    <!--数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="jdbc:mysql://localhost:3306/test?serverTimezone=UTC"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>

    <!--jdbc模版-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="accountDaoImpl" class="com.test.dao.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <!--事务定义-->
    <bean id="txDefinition" class="org.springframework.transaction.support.DefaultTransactionDefinition">
        <!-- 传播行为 -->
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
    </bean>

    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- ① 基于底层API管理-->
    <bean id="apiService" class="com.test.service.impl.ApiService">
        <property name="accountDaoImpl" ref="accountDaoImpl"/>
        <property name="txDefinition" ref="txDefinition"/>
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!-- ② 基于transaction template管理-->
    <bean id="templateService" class="com.test.service.impl.TemplateService">
        <property name="accountDaoImpl" ref="accountDaoImpl"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>

    <!--声明式管理, 若管理器名字是transactionManager则可以省略-->

    <!-- ③ 基于TransactionInterceptor实施管理-->
    <bean id="serviceTarget" class="com.test.service.impl.InterceptorService">
        <property name="accountDaoImpl" ref="accountDaoImpl"/>
    </bean>

    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="transform">PROPAGATION_REQUIRED</prop>
                <!--
                    传播行为 [，隔离级别] [，只读属性] [，超时属性] [不影响提交的异常] [，导致回滚的异常]
                    传播行为是唯一必须设置的属性，其他都可以忽略，Spring为我们提供了合理的默认值。
                    传播行为必须以“PROPAGATION_”开头, 共七种取值, 隔离级别必须以“ISOLATION_”开头, 共五种取值。
                    如果事务是只读的，那么我们可以指定只读属性，使用“readOnly”指定。否则我们不需要设置该属性。
                    超时属性的取值必须以“TIMEOUT_”开头，后面跟一个int类型的值，表示超时时间，单位是秒。
                    不影响提交的异常是指，即使事务中抛出了这些类型的异常，事务任然正常提交。
                    必须在异常名字前面加上“+”。异常的名字可以是类名的一部分。比如“+RuntimeException”、“+tion”等等。
                    导致回滚的异常是指，当事务中抛出这些类型的异常时，事务将回滚。
                    必须在异常名字前面加上“-”。异常的名字可以是类名的全部或者部分，比如“-RuntimeException”、“-tion”等等。
                    以下是两个示例：
                    <prop key="*Service">
                        PROPAGATION_REQUIRED，ISOLATION_READ_COMMITTED，TIMEOUT_20，+AbcException，+DefException，-HijException
                    </prop>
                    以上表达式表示，针对所有方法名以 Service 结尾的方法，使用 PROPAGATION_REQUIRED 事务传播行为，事务的隔离级别是 ISOLATION_READ_COMMITTED，超时时间为20秒，
                    当事务抛出 AbcException 或者 DefException 类型的异常，则仍然提交，当抛出 HijException 类型的异常时必须回滚事务。
                    这里没有指定"readOnly"，表示事务不是只读的。
                    <prop key="test">PROPAGATION_REQUIRED，readOnly</prop>
                    针对所有方法名为 test 的方法，使用 PROPAGATION_REQUIRED 事务传播行为，并且该事务是只读的。
                    除此之外，其他的属性均使用默认值, 隔离级别和超时时间使用底层事务性资源的默认值，并且当发生未检查异常，则回滚事务，发生已检查异常则仍提交事务。
                 -->
            </props>
        </property>
    </bean>

    <bean id="interceptorService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <!--aop-->
        <property name="target" ref="serviceTarget"/>
        <property name="interceptorNames">
            <list>
                <idref bean="transactionInterceptor"/>
            </list>
        </property>
    </bean>

    <!-- ④ 基于TransactionProxyFactoryBean管理, 是Interceptor方式的升级合并Interceptor\ProxyFactoryBean-->
    <bean id="proxyTarget" class="com.test.service.impl.ProxyService">
        <property name="accountDaoImpl" ref="accountDaoImpl"/>
    </bean>

    <bean id="proxyService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="target" ref="proxyTarget"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="transform">PROPAGATION_REQUIRED, +Exception</prop>
            </props>
        </property>
    </bean>

    <!-- ⑤ 基于<tx>命名空间-->
    <bean id="txService" class="com.test.service.impl.TxService">
        <property name="accountDaoImpl" ref="accountDaoImpl"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--传播方式-->
            <tx:method name="transform" propagation="SUPPORTS"/>
            <!--异常要写全路径-->
            <tx:method name="no-rollback-for" no-rollback-for="java.lang.ArithmeticException"/>
            <!--还可配置其他的属性-->
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.test.service.impl.TxService.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
        <!--可继续配置多个切点-->
    </aop:config>

    <!-- ⑥ 基于注解@Transactional 因激活后处理bean-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>